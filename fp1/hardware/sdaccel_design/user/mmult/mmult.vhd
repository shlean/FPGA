-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmult is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mmult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mmult,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=3.333330,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433330,HLS_SYN_LAT=274465,HLS_SYN_TPT=none,HLS_SYN_MEM=26,HLS_SYN_DSP=4,HLS_SYN_FF=1835,HLS_SYN_LUT=2211}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv14_1000 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";

    signal ap_rst_n_inv : STD_LOGIC := '1';
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (63 downto 0);
    signal b : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal exitcond3_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp3_iter1_exitcond3_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond1_reg_705 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond2_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_250 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_reg_pp0_iter1_indvar_reg_250 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar8_reg_262 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_reg_pp1_iter1_indvar8_reg_262 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state19_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_flatten1_reg_274 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvar_flatten_reg_285 : STD_LOGIC_VECTOR (13 downto 0);
    signal c_reg_296 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_reg_307 : STD_LOGIC_VECTOR (6 downto 0);
    signal running_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_reg_330 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar1_reg_341 : STD_LOGIC_VECTOR (12 downto 0);
    signal gmem_addr_reg_673 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_679 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_685 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond2_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_418_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_next_reg_695 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal gmem_addr_2_read_reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter1_exitcond1_reg_705 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next9_fu_435_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_next9_reg_709 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal gmem_addr_1_read_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten1_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state23_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state25_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state26_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state27_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state28_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ap_reg_pp2_iter1_exitcond_flatten1_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter2_exitcond_flatten1_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter3_exitcond_flatten1_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter4_exitcond_flatten1_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter5_exitcond_flatten1_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next1_fu_452_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_470_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal c_cast4_mid2_v_fu_503_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_cast4_mid2_v_reg_742 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal tmp_14_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_748 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter2_tmp_14_reg_748 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter3_tmp_14_reg_748 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter4_tmp_14_reg_748 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter5_tmp_14_reg_748 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_mid2_fu_545_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal index_mid2_reg_753 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_mid2_fu_565_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_mid2_reg_758 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_mid2_fu_573_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_fu_581_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_reg_769 : STD_LOGIC_VECTOR (5 downto 0);
    signal index_1_fu_585_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal index_1_reg_774 : STD_LOGIC_VECTOR (6 downto 0);
    signal ifzero_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_790 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter3_ifzero_reg_790 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter4_ifzero_reg_790 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter5_ifzero_reg_790 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_630_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_reg_794 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp2_iter3_tmp_7_reg_794 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp2_iter4_tmp_7_reg_794 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp2_iter5_tmp_7_reg_794 : STD_LOGIC_VECTOR (11 downto 0);
    signal bufa_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bufa_load_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal bufb_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bufb_load_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_635_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal running_1_fu_646_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal exitcond3_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state31_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp3_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal ap_block_state33_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal indvar_next1_fu_662_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal bufc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bufc_load_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp2_exit_iter1_state24 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state31 : STD_LOGIC;
    signal bufa_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal bufa_ce0 : STD_LOGIC;
    signal bufa_we0 : STD_LOGIC;
    signal bufb_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal bufb_ce0 : STD_LOGIC;
    signal bufb_we0 : STD_LOGIC;
    signal bufc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal bufc_ce0 : STD_LOGIC;
    signal bufc_we0 : STD_LOGIC;
    signal bufc_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_phi_fu_254_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar8_phi_fu_266_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_phi_fu_300_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal index_phi_fu_334_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal output5_fu_352_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal b3_fu_372_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal a1_fu_392_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal indvar_flatten_op_fu_464_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_fu_478_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_s_fu_497_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_482_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_mid_fu_490_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_mid_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_fu_534_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_fu_553_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_mid1_fu_557_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_mid_fu_510_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal index_cast2_fu_594_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_602_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_cast4_mid2_fu_591_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal aIndex_fu_597_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bIndex_fu_609_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal running_mid2_fu_639_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component mmult_mul_32s_32s_32_2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_bufa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        a : OUT STD_LOGIC_VECTOR (63 downto 0);
        b : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component mmult_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mmult_control_s_axi_U : component mmult_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        a => a,
        b => b,
        output_r => output_r);

    mmult_gmem_m_axi_U : component mmult_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_reg_673,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1000,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => bufc_load_reg_833,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    bufa_U : component mmult_bufa
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bufa_address0,
        ce0 => bufa_ce0,
        we0 => bufa_we0,
        d0 => gmem_addr_2_read_reg_700,
        q0 => bufa_q0);

    bufb_U : component mmult_bufa
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bufb_address0,
        ce0 => bufb_ce0,
        we0 => bufb_we0,
        d0 => gmem_addr_1_read_reg_714,
        q0 => bufb_q0);

    bufc_U : component mmult_bufa
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bufc_address0,
        ce0 => bufc_ce0,
        we0 => bufc_we0,
        d0 => bufc_d0,
        q0 => bufc_q0);

    mmult_mul_32s_32s_32_2_U1 : component mmult_mul_32s_32s_32_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => bufb_load_reg_804,
        din1 => bufa_load_reg_799,
        ce => ap_const_logic_1,
        dout => grp_fu_635_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state9 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state19 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_subdone = ap_const_boolean_0) and (exitcond_flatten1_fu_446_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter1_state24)) then 
                        ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state31))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp3_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state31)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_condition_pp3_exit_iter0_state31 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp3_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = gmem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_logic_1 = gmem_ARREADY)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                    if ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_AWREADY)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_reg_pp3_iter1_exitcond3_reg_819 = ap_const_lv1_0))) then
                    if ((ap_block_pp3_stage0_11001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = gmem_WREADY) and (ap_block_pp3_stage0_01001 = ap_const_boolean_0))) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_n_inv <= not(ap_rst_n);
        end if;
    end process;

    c_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                c_reg_296 <= ap_const_lv7_0;
            elsif (((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond_flatten1_reg_719) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2))) then 
                c_reg_296 <= c_cast4_mid2_v_reg_742;
            end if; 
        end if;
    end process;

    index_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                index_reg_330 <= ap_const_lv7_0;
            elsif (((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond_flatten1_reg_719) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2))) then 
                index_reg_330 <= index_1_reg_774;
            end if; 
        end if;
    end process;

    indvar1_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1))) then 
                indvar1_reg_341 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_lv1_0 = exitcond3_fu_656_p2))) then 
                indvar1_reg_341 <= indvar_next1_fu_662_p2;
            end if; 
        end if;
    end process;

    indvar8_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                indvar8_reg_262 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_705) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0))) then 
                indvar8_reg_262 <= indvar_next9_reg_709;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                indvar_flatten1_reg_274 <= ap_const_lv19_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond_flatten1_fu_446_p2))) then 
                indvar_flatten1_reg_274 <= indvar_flatten_next1_fu_452_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                indvar_flatten_reg_285 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond_flatten1_fu_446_p2))) then 
                indvar_flatten_reg_285 <= indvar_flatten_next_fu_470_p3;
            end if; 
        end if;
    end process;

    indvar_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_reg_691) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then 
                indvar_reg_250 <= indvar_next_reg_695;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_reg_250 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    r_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                r_reg_307 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond_flatten1_reg_719))) then 
                r_reg_307 <= r_mid2_fu_573_p3;
            end if; 
        end if;
    end process;

    running_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                running_reg_318 <= ap_const_lv32_0;
            elsif (((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter6) and (ap_const_lv1_0 = ap_reg_pp2_iter5_exitcond_flatten1_reg_719))) then 
                running_reg_318 <= running_1_fu_646_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond2_reg_691 <= exitcond2_reg_691;
                ap_reg_pp0_iter1_indvar_reg_250 <= indvar_reg_250;
                exitcond2_reg_691 <= exitcond2_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_exitcond1_reg_705 <= exitcond1_reg_705;
                ap_reg_pp1_iter1_indvar8_reg_262 <= indvar8_reg_262;
                exitcond1_reg_705 <= exitcond1_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_11001 = ap_const_boolean_0))) then
                ap_reg_pp2_iter1_exitcond_flatten1_reg_719 <= exitcond_flatten1_reg_719;
                exitcond_flatten1_reg_719 <= exitcond_flatten1_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp2_stage0_11001 = ap_const_boolean_0)) then
                ap_reg_pp2_iter2_exitcond_flatten1_reg_719 <= ap_reg_pp2_iter1_exitcond_flatten1_reg_719;
                ap_reg_pp2_iter2_tmp_14_reg_748 <= tmp_14_reg_748;
                ap_reg_pp2_iter3_exitcond_flatten1_reg_719 <= ap_reg_pp2_iter2_exitcond_flatten1_reg_719;
                ap_reg_pp2_iter3_ifzero_reg_790 <= ifzero_reg_790;
                ap_reg_pp2_iter3_tmp_14_reg_748 <= ap_reg_pp2_iter2_tmp_14_reg_748;
                ap_reg_pp2_iter3_tmp_7_reg_794 <= tmp_7_reg_794;
                ap_reg_pp2_iter4_exitcond_flatten1_reg_719 <= ap_reg_pp2_iter3_exitcond_flatten1_reg_719;
                ap_reg_pp2_iter4_ifzero_reg_790 <= ap_reg_pp2_iter3_ifzero_reg_790;
                ap_reg_pp2_iter4_tmp_14_reg_748 <= ap_reg_pp2_iter3_tmp_14_reg_748;
                ap_reg_pp2_iter4_tmp_7_reg_794 <= ap_reg_pp2_iter3_tmp_7_reg_794;
                ap_reg_pp2_iter5_exitcond_flatten1_reg_719 <= ap_reg_pp2_iter4_exitcond_flatten1_reg_719;
                ap_reg_pp2_iter5_ifzero_reg_790 <= ap_reg_pp2_iter4_ifzero_reg_790;
                ap_reg_pp2_iter5_tmp_14_reg_748 <= ap_reg_pp2_iter4_tmp_14_reg_748;
                ap_reg_pp2_iter5_tmp_7_reg_794 <= ap_reg_pp2_iter4_tmp_7_reg_794;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_11001 = ap_const_boolean_0))) then
                ap_reg_pp3_iter1_exitcond3_reg_819 <= exitcond3_reg_819;
                exitcond3_reg_819 <= exitcond3_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter3) and (ap_const_lv1_0 = ap_reg_pp2_iter2_exitcond_flatten1_reg_719))) then
                bufa_load_reg_799 <= bufa_q0;
                bufb_load_reg_804 <= bufb_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (exitcond3_reg_819 = ap_const_lv1_0))) then
                bufc_load_reg_833 <= bufc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond_flatten1_reg_719))) then
                c_cast4_mid2_v_reg_742 <= c_cast4_mid2_v_fu_503_p3;
                index_1_reg_774 <= index_1_fu_585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten1_fu_446_p2))) then
                exitcond_flatten_reg_728 <= exitcond_flatten_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond1_reg_705) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0))) then
                gmem_addr_1_read_reg_714 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    gmem_addr_1_reg_679(61 downto 0) <= tmp_3_fu_382_p1(61 downto 0);
                    gmem_addr_2_reg_685(61 downto 0) <= tmp_12_fu_402_p1(61 downto 0);
                    gmem_addr_reg_673(61 downto 0) <= tmp_2_fu_362_p1(61 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond2_reg_691) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                gmem_addr_2_read_reg_700 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond_flatten1_reg_719))) then
                ifzero_reg_790 <= ifzero_fu_625_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten1_reg_719))) then
                index_mid2_reg_753 <= index_mid2_fu_545_p3;
                tmp_14_reg_748 <= tmp_14_fu_540_p2;
                tmp_16_reg_769 <= tmp_16_fu_581_p1;
                    tmp_6_mid2_reg_758(11 downto 6) <= tmp_6_mid2_fu_565_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then
                indvar_next9_reg_709 <= indvar_next9_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_next_reg_695 <= indvar_next_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp2_iter4_exitcond_flatten1_reg_719))) then
                tmp_10_reg_809 <= grp_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ifzero_fu_625_p2 = ap_const_lv1_1))) then
                tmp_7_reg_794 <= tmp_7_fu_630_p2;
            end if;
        end if;
    end process;
    gmem_addr_reg_673(63 downto 62) <= "00";
    gmem_addr_1_reg_679(63 downto 62) <= "00";
    gmem_addr_2_reg_685(63 downto 62) <= "00";
    tmp_6_mid2_reg_758(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state30, ap_enable_reg_pp3_iter2, ap_CS_fsm_state38, ap_CS_fsm_state12, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, gmem_BVALID, exitcond2_fu_412_p2, ap_enable_reg_pp0_iter0, exitcond1_fu_429_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter6, exitcond3_fu_656_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter5, ap_sig_ioackin_gmem_AWREADY, ap_block_pp3_stage0_subdone, ap_sig_ioackin_gmem_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (exitcond2_fu_412_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (exitcond2_fu_412_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (exitcond1_fu_429_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (exitcond1_fu_429_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter6) and (ap_block_pp2_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp2_iter6) and (ap_block_pp2_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_block_pp3_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_block_pp3_stage0_subdone = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond3_fu_656_p2) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_block_pp3_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_block_pp3_stage0_subdone = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond3_fu_656_p2) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a1_fu_392_p4 <= a(63 downto 2);
    aIndex_fu_597_p2 <= std_logic_vector(unsigned(index_cast2_fu_594_p1) + unsigned(tmp_6_mid2_reg_758));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(17);
    ap_CS_fsm_state30 <= ap_CS_fsm(19);
    ap_CS_fsm_state38 <= ap_CS_fsm(25);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond2_reg_691, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_reg_691) and (ap_const_logic_0 = gmem_RVALID));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond2_reg_691, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_reg_691) and (ap_const_logic_0 = gmem_RVALID));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond1_reg_705, gmem_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_705) and (ap_const_logic_0 = gmem_RVALID));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond1_reg_705, gmem_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_705) and (ap_const_logic_0 = gmem_RVALID));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state33_io)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_boolean_1 = ap_block_state33_io));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state33_io)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_boolean_1 = ap_block_state33_io));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(exitcond2_reg_691, gmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((ap_const_lv1_0 = exitcond2_reg_691) and (ap_const_logic_0 = gmem_RVALID));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp1_stage0_iter1_assign_proc : process(exitcond1_reg_705, gmem_RVALID)
    begin
                ap_block_state20_pp1_stage0_iter1 <= ((ap_const_lv1_0 = exitcond1_reg_705) and (ap_const_logic_0 = gmem_RVALID));
    end process;

        ap_block_state21_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_io_assign_proc : process(ap_reg_pp3_iter1_exitcond3_reg_819, ap_sig_ioackin_gmem_WREADY)
    begin
                ap_block_state33_io <= ((ap_reg_pp3_iter1_exitcond3_reg_819 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY));
    end process;

        ap_block_state33_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond2_fu_412_p2)
    begin
        if ((exitcond2_fu_412_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state19_assign_proc : process(exitcond1_fu_429_p2)
    begin
        if ((exitcond1_fu_429_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter1_state24_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_condition_pp2_exit_iter1_state24 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter1_state24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state31_assign_proc : process(exitcond3_fu_656_p2)
    begin
        if ((ap_const_lv1_1 = exitcond3_fu_656_p2)) then 
            ap_condition_pp3_exit_iter0_state31 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state38, gmem_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (gmem_BVALID = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1) and (ap_const_logic_0 = ap_enable_reg_pp1_iter2))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp2_iter0) and (ap_const_logic_0 = ap_enable_reg_pp2_iter1) and (ap_const_logic_0 = ap_enable_reg_pp2_iter2) and (ap_const_logic_0 = ap_enable_reg_pp2_iter3) and (ap_const_logic_0 = ap_enable_reg_pp2_iter4) and (ap_const_logic_0 = ap_enable_reg_pp2_iter5) and (ap_const_logic_0 = ap_enable_reg_pp2_iter6))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp3_iter0) and (ap_const_logic_0 = ap_enable_reg_pp3_iter1) and (ap_const_logic_0 = ap_enable_reg_pp3_iter2))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state38, gmem_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (gmem_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    b3_fu_372_p4 <= b(63 downto 2);
    bIndex_fu_609_p2 <= std_logic_vector(unsigned(tmp_s_fu_602_p3) + unsigned(c_cast4_mid2_fu_591_p1));

    bufa_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, tmp_fu_424_p1, tmp_5_fu_615_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_block_pp2_stage0 = ap_const_boolean_0))) then 
            bufa_address0 <= tmp_5_fu_615_p1(12 - 1 downto 0);
        elsif (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            bufa_address0 <= tmp_fu_424_p1(12 - 1 downto 0);
        else 
            bufa_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    bufa_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2)) or ((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            bufa_ce0 <= ap_const_logic_1;
        else 
            bufa_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bufa_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter1_exitcond2_reg_691, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond2_reg_691))) then 
            bufa_we0 <= ap_const_logic_1;
        else 
            bufa_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bufb_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, tmp_1_fu_441_p1, tmp_9_fu_620_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_block_pp2_stage0 = ap_const_boolean_0))) then 
            bufb_address0 <= tmp_9_fu_620_p1(12 - 1 downto 0);
        elsif (((ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2))) then 
            bufb_address0 <= tmp_1_fu_441_p1(12 - 1 downto 0);
        else 
            bufb_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    bufb_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2)) or ((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2)))) then 
            bufb_ce0 <= ap_const_logic_1;
        else 
            bufb_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bufb_we0_assign_proc : process(ap_block_pp1_stage0_11001, ap_reg_pp1_iter1_exitcond1_reg_705, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond1_reg_705))) then 
            bufb_we0 <= ap_const_logic_1;
        else 
            bufb_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bufc_address0_assign_proc : process(ap_block_pp3_stage0, ap_enable_reg_pp2_iter6, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp2_stage0, tmp_8_fu_652_p1, tmp_4_fu_668_p1)
    begin
        if (((ap_block_pp3_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0))) then 
            bufc_address0 <= tmp_4_fu_668_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp2_iter6) and (ap_block_pp2_stage0 = ap_const_boolean_0))) then 
            bufc_address0 <= tmp_8_fu_652_p1(12 - 1 downto 0);
        else 
            bufc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    bufc_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter6, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter6)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0)))) then 
            bufc_ce0 <= ap_const_logic_1;
        else 
            bufc_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bufc_d0 <= std_logic_vector(unsigned(running_mid2_fu_639_p3) + unsigned(tmp_10_reg_809));

    bufc_we0_assign_proc : process(ap_block_pp2_stage0_11001, ap_reg_pp2_iter5_ifzero_reg_790, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter6) and (ap_reg_pp2_iter5_ifzero_reg_790 = ap_const_lv1_1))) then 
            bufc_we0 <= ap_const_logic_1;
        else 
            bufc_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_cast4_mid2_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_cast4_mid2_v_reg_742),12));
    c_cast4_mid2_v_fu_503_p3 <= 
        c_s_fu_497_p2 when (exitcond_flatten_reg_728(0) = '1') else 
        c_phi_fu_300_p4;

    c_phi_fu_300_p4_assign_proc : process(c_reg_296, ap_reg_pp2_iter1_exitcond_flatten1_reg_719, c_cast4_mid2_v_reg_742, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0)
    begin
        if (((ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond_flatten1_reg_719) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_block_pp2_stage0 = ap_const_boolean_0))) then 
            c_phi_fu_300_p4 <= c_cast4_mid2_v_reg_742;
        else 
            c_phi_fu_300_p4 <= c_reg_296;
        end if; 
    end process;

    c_s_fu_497_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(c_phi_fu_300_p4));
    exitcond1_fu_429_p2 <= "1" when (indvar8_phi_fu_266_p4 = ap_const_lv13_1000) else "0";
    exitcond2_fu_412_p2 <= "1" when (indvar_phi_fu_254_p4 = ap_const_lv13_1000) else "0";
    exitcond3_fu_656_p2 <= "1" when (indvar1_reg_341 = ap_const_lv13_1000) else "0";
    exitcond_flatten1_fu_446_p2 <= "1" when (indvar_flatten1_reg_274 = ap_const_lv19_40000) else "0";
    exitcond_flatten_fu_458_p2 <= "1" when (indvar_flatten_reg_285 = ap_const_lv14_1000) else "0";
    exitcond_fu_522_p2 <= "1" when (index_phi_fu_334_p4 = ap_const_lv7_40) else "0";
    exitcond_mid_fu_528_p2 <= (exitcond_fu_522_p2 and not_exitcond_flatten_fu_517_p2);

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state2, gmem_addr_1_reg_679, gmem_addr_2_reg_685, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                gmem_ARADDR <= gmem_addr_1_reg_679;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                gmem_ARADDR <= gmem_addr_2_reg_685;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state2, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state30, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state38, gmem_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (gmem_BVALID = ap_const_logic_1))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond1_reg_705, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond2_reg_691, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_reg_691) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_705) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp3_iter2, ap_reg_pp3_iter1_exitcond3_reg_819, ap_reg_ioackin_gmem_WREADY, ap_block_pp3_stage0_01001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_reg_pp3_iter1_exitcond3_reg_819 = ap_const_lv1_0) and (ap_block_pp3_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state12, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond1_reg_705, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond2_reg_691)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond1_reg_705)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond2_reg_691)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, ap_reg_pp3_iter1_exitcond3_reg_819)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_block_pp3_stage0 = ap_const_boolean_0) and (ap_reg_pp3_iter1_exitcond3_reg_819 = ap_const_lv1_0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ifzero_fu_625_p2 <= "1" when (index_1_reg_774 = ap_const_lv7_40) else "0";
    index_1_fu_585_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(index_mid2_fu_545_p3));
    index_cast2_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_mid2_reg_753),12));
    index_mid2_fu_545_p3 <= 
        ap_const_lv7_0 when (tmp_14_fu_540_p2(0) = '1') else 
        index_phi_fu_334_p4;

    index_phi_fu_334_p4_assign_proc : process(index_reg_330, ap_reg_pp2_iter1_exitcond_flatten1_reg_719, index_1_reg_774, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0)
    begin
        if (((ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond_flatten1_reg_719) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_block_pp2_stage0 = ap_const_boolean_0))) then 
            index_phi_fu_334_p4 <= index_1_reg_774;
        else 
            index_phi_fu_334_p4 <= index_reg_330;
        end if; 
    end process;


    indvar8_phi_fu_266_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond1_reg_705, indvar8_reg_262, indvar_next9_reg_709)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond1_reg_705))) then 
            indvar8_phi_fu_266_p4 <= indvar_next9_reg_709;
        else 
            indvar8_phi_fu_266_p4 <= indvar8_reg_262;
        end if; 
    end process;

    indvar_flatten_next1_fu_452_p2 <= std_logic_vector(unsigned(ap_const_lv19_1) + unsigned(indvar_flatten1_reg_274));
    indvar_flatten_next_fu_470_p3 <= 
        ap_const_lv14_1 when (exitcond_flatten_fu_458_p2(0) = '1') else 
        indvar_flatten_op_fu_464_p2;
    indvar_flatten_op_fu_464_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_285) + unsigned(ap_const_lv14_1));
    indvar_next1_fu_662_p2 <= std_logic_vector(unsigned(indvar1_reg_341) + unsigned(ap_const_lv13_1));
    indvar_next9_fu_435_p2 <= std_logic_vector(unsigned(indvar8_phi_fu_266_p4) + unsigned(ap_const_lv13_1));
    indvar_next_fu_418_p2 <= std_logic_vector(unsigned(indvar_phi_fu_254_p4) + unsigned(ap_const_lv13_1));

    indvar_phi_fu_254_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond2_reg_691, indvar_reg_250, indvar_next_reg_695)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond2_reg_691))) then 
            indvar_phi_fu_254_p4 <= indvar_next_reg_695;
        else 
            indvar_phi_fu_254_p4 <= indvar_reg_250;
        end if; 
    end process;

    not_exitcond_flatten_fu_517_p2 <= (exitcond_flatten_reg_728 xor ap_const_lv1_1);
    output5_fu_352_p4 <= output_r(63 downto 2);
    r_1_fu_534_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(r_mid_fu_490_p3));
    r_mid2_fu_573_p3 <= 
        r_1_fu_534_p2 when (exitcond_mid_fu_528_p2(0) = '1') else 
        r_mid_fu_490_p3;
    r_mid_fu_490_p3 <= 
        ap_const_lv7_0 when (exitcond_flatten_reg_728(0) = '1') else 
        r_reg_307;
    running_1_fu_646_p2 <= std_logic_vector(unsigned(running_mid2_fu_639_p3) + unsigned(tmp_10_reg_809));
    running_mid2_fu_639_p3 <= 
        ap_const_lv32_0 when (ap_reg_pp2_iter5_tmp_14_reg_748(0) = '1') else 
        running_reg_318;
    tmp_12_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a1_fu_392_p4),64));
    tmp_13_fu_478_p1 <= r_reg_307(6 - 1 downto 0);
    tmp_14_fu_540_p2 <= (exitcond_mid_fu_528_p2 or exitcond_flatten_reg_728);
    tmp_15_fu_553_p1 <= r_1_fu_534_p2(6 - 1 downto 0);
    tmp_16_fu_581_p1 <= index_mid2_fu_545_p3(6 - 1 downto 0);
    tmp_1_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp1_iter1_indvar8_reg_262),64));
    tmp_2_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output5_fu_352_p4),64));
    tmp_3_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b3_fu_372_p4),64));
    tmp_4_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar1_reg_341),64));
    tmp_5_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(aIndex_fu_597_p2),64));
    tmp_6_fu_482_p3 <= (tmp_13_fu_478_p1 & ap_const_lv6_0);
    tmp_6_mid1_fu_557_p3 <= (tmp_15_fu_553_p1 & ap_const_lv6_0);
    tmp_6_mid2_fu_565_p3 <= 
        tmp_6_mid1_fu_557_p3 when (exitcond_mid_fu_528_p2(0) = '1') else 
        tmp_6_mid_fu_510_p3;
    tmp_6_mid_fu_510_p3 <= 
        ap_const_lv12_0 when (exitcond_flatten_reg_728(0) = '1') else 
        tmp_6_fu_482_p3;
    tmp_7_fu_630_p2 <= std_logic_vector(unsigned(tmp_6_mid2_reg_758) + unsigned(c_cast4_mid2_fu_591_p1));
    tmp_8_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp2_iter5_tmp_7_reg_794),64));
    tmp_9_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bIndex_fu_609_p2),64));
    tmp_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_indvar_reg_250),64));
    tmp_s_fu_602_p3 <= (tmp_16_reg_769 & ap_const_lv6_0);
end behav;
