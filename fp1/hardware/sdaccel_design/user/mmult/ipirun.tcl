# This file automatically generated by SDx 
# please do not modify
source -notrace "/software/Xilinx/SDx_2017.1/SDx/2017.1/bin/../scripts/ocl/ocl_util.tcl"

set project_name "ipiprj"
set design_name "dr"
set dsa_name "4ddr-xpr"
set dsa_part "xcvu9p-flgb2104-2-i"
set dict_DATA_CLK [dict create \
  is_user_set false \
  freq_orig 300 \
  freq 300];
set dict_KERNEL_CLK2 [dict create \
  is_user_set false \
  freq_orig 500 \
  freq 500];
set kernel_clock_freqs [dict create \
  DATA_CLK $dict_DATA_CLK \
  KERNEL_CLK2 $dict_KERNEL_CLK2 \
];
set system_clock_freqs [dict create \
];

set steps_log "/root/huaweicloud-fpga/fp1/hardware/sdaccel_design/user/mmult/src/_xocc_mmult_bin_mmult_hw.dir/_xocc_mmult_bin_mmult_hw.dir.steps.log"
set dsa_dcp "/root/huaweicloud-fpga/fp1/hardware/sdaccel_design/user/mmult/src/.Xil/xocc-23528-ecs-4cbc.novalocal/xilinx_huawei-vu9p-fp1_4ddr-xpr_4_1/xilinx_huawei-vu9p-fp1_4ddr-xpr_4_1.dcp"
set dsa_uses_pr_shell_dcp false
set utilization [dict create \
  luts                   950606 \
  brams                  1762 \
  registers              2089405 \
  dsps                   6827 \
];
set dsa_info [dict create \
  dsa_part                "xcvu9p-flgb2104-2-i" \
  dsa_vbnv                "xilinx:huawei-vu9p-fp1:4ddr-xpr:4.1" \
  dsa_dcp                 "/root/huaweicloud-fpga/fp1/hardware/sdaccel_design/user/mmult/src/.Xil/xocc-23528-ecs-4cbc.novalocal/xilinx_huawei-vu9p-fp1_4ddr-xpr_4_1/xilinx_huawei-vu9p-fp1_4ddr-xpr_4_1.dcp" \
  dsa_uses_pr               true \
  dsa_uses_static_synth_dcp false \
  dsa_uses_pr_shell_dcp     false \
  pr_shell_dcp            "" \
  ocl_region              "xcl_design_i/expanded_region/u_ocl_region" \
  parent_rm_instance_path "xcl_design_i/expanded_region" \
  link_output_format      "bitstream" \
  utilization             $utilization \
];
set config_info [dict create \
  ocl_dcp                  "./$design_name.dcp" \
  out_partial_bitstream    "./partial.bit" \
  out_partial_clear_bit    "./partial_clear.bit" \
  out_full_bitstream       "./system.bit" \
  gen_extra_run_data        true \
  enable_auto_freq_scale    true \
  enable_dont_partition     true \
  enable_util_report        true \
  utilization_threshold     0.8 \
  generate_script_only      false \
  run_script_map_file      "" \
  clbinary_name            "bin_mmult_hw" \
  kernels                  "mmult" \
  steps_log                "/root/huaweicloud-fpga/fp1/hardware/sdaccel_design/user/mmult/src/_xocc_mmult_bin_mmult_hw.dir/_xocc_mmult_bin_mmult_hw.dir.steps.log" \
  num_jobs                   8 \
];
set clk_info [dict create \
  kernel_clock_freqs         $kernel_clock_freqs \
  system_clock_freqs         $system_clock_freqs \
  worst_negative_slack      0 \
  lock_slack_threshold      1.2 \
  max_frequency             500 \
  min_frequency             60 \
  error_on_hold_violation   true \
  skip_timing_and_scaling   false \
];
dict set dsa_info dsa_static_xdef "/root/huaweicloud-fpga/fp1/hardware/sdaccel_design/user/mmult/src/.Xil/xocc-23528-ecs-4cbc.novalocal/xilinx_huawei-vu9p-fp1_4ddr-xpr_4_1/xilinx_huawei-vu9p-fp1_4ddr-xpr_4_1.xdef"
set kernel_ip_dirs {
  {/root/huaweicloud-fpga/fp1/hardware/sdaccel_design/user/mmult/src/_xocc_mmult_bin_mmult_hw.dir/impl/kernels/mmult/mmult/ip}}

set ocl_ip_info [dict create\
	VLNV   xilinx.com:ip:ocl_block:1.0 \
	CONFIG {  BOUNDARY_VERSION 2  C_BASEADDR {0x00018000}  C_HIGHADDR {0x0001FFFF}  Component_Name {xcl_design_u_ocl_region_0}  EDK_IPTYPE {PERIPHERAL}  ENABLE_ADVANCED_OPTIONS 1  ENABLE_PROFILING 1  ENABLE_SMARTCONNECT 0  HAS_BURST 0  HAS_CONTROL_CLOCK 1  HAS_INTERRUPT 0  HAS_KERNEL_CLOCK 0  HAS_KERNEL_CLOCK2 1  HAS_S_MEM 0  KERNEL_TYPE {ADD_ONE}  KERNEL_VLNV {none}  M00_AXIS_RX_TDATA_NUM_BYTES 8  M00_AXIS_RX_TUSER_WIDTH 8  M01_AXIS_RX_TDATA_NUM_BYTES 8  M01_AXIS_RX_TUSER_WIDTH 8  M_ADDR_WIDTH 36  M_DATA_WIDTH {512}  M_HAS_REGSLICE 4  M_HAS_REGSLICE_MI 0  M_ID_WIDTH 4  NUM_KERNELS 4  NUM_MI 4  NUM_M_AXIS_RX 0  NUM_S_AXIS_TX 0  REGSLICE_CONFIG_DICT {none}  S00_AXIS_TX_TDATA_NUM_BYTES 8  S00_AXIS_TX_TUSER_WIDTH 8  S01_AXIS_TX_TDATA_NUM_BYTES 8  S01_AXIS_TX_TUSER_WIDTH 8  SYNC_RESET 1  S_ADDR_WIDTH 17  S_DATA_WIDTH 32  S_HAS_REGSLICE 4  S_HAS_REGSLICE_SI 0  S_MEM_ADDR_WIDTH 16  S_MEM_DATA_WIDTH 32  S_MEM_ID_WIDTH 1  TIEOFF_KERNEL_RESET 0  USER_WIDTH 0  USE_BSCAN 0  USE_PR 0  USE_SYNTH 0  }\
];

# information regarding ips which needs to be added to OCL_REGION only in hw_em flow
set debug_settings [dict create \
  FLOW hw\
  KERNEL_DEBUG false\
  PROTOCOL_CHECKER false\
  SIMULATOR Xsim\
];

set dsa_ports { }
lappend dsa_ports [dict create \
  NAME             M00_AXI\
  TYPE             addressable\
  MODE             master\
  PROTOCOL         AXI4\
  ID_WIDTH         4\
  DATA_WIDTH       512\
  ADDR_WIDTH       36\
  USER_WIDTH       0\
  MAX_BURST_LENGTH 256\
  ADDR_OFFSET      0x00000000\
  ADDR_RANGE       0x0000000400000000\
  ADDR_SEGS [list \
    [dict create TYPE MEMORY NAME {expanded_region_memc_ddrmem_0} OFFSET {0x00000000} RANGE {0x400000000}] \
  ] \
  ];

lappend dsa_ports [dict create \
  NAME             M01_AXI\
  TYPE             addressable\
  MODE             master\
  PROTOCOL         AXI4\
  ID_WIDTH         4\
  DATA_WIDTH       512\
  ADDR_WIDTH       36\
  USER_WIDTH       0\
  MAX_BURST_LENGTH 256\
  ADDR_OFFSET      0x000400000000\
  ADDR_RANGE       0x0000000400000000\
  ADDR_SEGS [list \
    [dict create TYPE MEMORY NAME {base_region_memc_ddrmem_1} OFFSET {0x000400000000} RANGE {0x400000000}] \
  ] \
  ];

lappend dsa_ports [dict create \
  NAME             M02_AXI\
  TYPE             addressable\
  MODE             master\
  PROTOCOL         AXI4\
  ID_WIDTH         4\
  DATA_WIDTH       512\
  ADDR_WIDTH       36\
  USER_WIDTH       0\
  MAX_BURST_LENGTH 256\
  ADDR_OFFSET      0x000800000000\
  ADDR_RANGE       0x0000000400000000\
  ADDR_SEGS [list \
    [dict create TYPE MEMORY NAME {expanded_region_memc_ddrmem_2} OFFSET {0x000800000000} RANGE {0x400000000}] \
  ] \
  ];

lappend dsa_ports [dict create \
  NAME             M03_AXI\
  TYPE             addressable\
  MODE             master\
  PROTOCOL         AXI4\
  ID_WIDTH         4\
  DATA_WIDTH       512\
  ADDR_WIDTH       36\
  USER_WIDTH       0\
  MAX_BURST_LENGTH 256\
  ADDR_OFFSET      0x000C00000000\
  ADDR_RANGE       0x0000000400000000\
  ADDR_SEGS [list \
    [dict create TYPE MEMORY NAME {expanded_region_memc_ddrmem_3} OFFSET {0x000C00000000} RANGE {0x400000000}] \
  ] \
  ];

lappend dsa_ports [dict create \
  NAME             S_AXI\
  TYPE             addressable\
  MODE             slave\
  PROTOCOL         AXI4LITE\
  ID_WIDTH         0\
  DATA_WIDTH       32\
  ADDR_WIDTH       17\
  USER_WIDTH       0\
  MAX_BURST_LENGTH 1\
  ADDR_OFFSET      0x00000000\
  ADDR_RANGE       0x00008000\
  ADDR_SEGS [list \
    [dict create TYPE REGISTER NAME {} OFFSET {0x00000000} RANGE {0x00008000}] \
  ] \
  ];

lappend dsa_ports [dict create \
  NAME             DATA_CLK\
  TYPE             clk\
  MODE             input\
  CONFIG           {CONFIG.FREQ_HZ 300000000}\
  ];

lappend dsa_ports [dict create \
  NAME             DATA_RESET\
  TYPE             rst\
  MODE             input\
  CONFIG           {}\
  ];

lappend dsa_ports [dict create \
  NAME             CONTROL_CLK\
  TYPE             clk\
  MODE             input\
  CONFIG           {CONFIG.FREQ_HZ 50000000}\
  ];

lappend dsa_ports [dict create \
  NAME             CONTROL_RESET\
  TYPE             rst\
  MODE             input\
  CONFIG           {}\
  ];

lappend dsa_ports [dict create \
  NAME             KERNEL_CLK2\
  TYPE             clk\
  MODE             input\
  CONFIG           {CONFIG.FREQ_HZ 500000000}\
  ];

lappend dsa_ports [dict create \
  NAME             KERNEL_RESET2\
  TYPE             rst\
  MODE             input\
  CONFIG           {}\
  ];

### Board info
set board_memories {}
lappend board_memories [dict create  \
  NAME        expanded_region_memc_ddrmem_0 \
  TYPE        ddr4 \
  SIZE        16GB \
  CONFIG      {    AXI_ARBITRATION_SCHEME  RD_PRI_REG
    BURST_LENGTH  8
    C0.APP_ADDR_WIDTH  31
    C0.APP_DATA_WIDTH  512
    C0.ControllerType  DDR4_SDRAM
    C0.DDR4_ADDR_WIDTH  17
    C0.DDR4_AXI_ADDR_WIDTH  34
    C0.DDR4_AXI_DATA_WIDTH  512
    C0.DDR4_AXI_ID_WIDTH  1
    C0.DDR4_AutoPrecharge  false
    C0.DDR4_AxiNarrowBurst  false
    C0.DDR4_BANK_GROUP_WIDTH  2
    C0.DDR4_BANK_WIDTH  2
    C0.DDR4_CL  0
    C0.DDR4_COLUMN_WIDTH  10
    C0.DDR4_CWL  0
    C0.DDR4_Mem_Add_Map  ROW_COLUMN_BANK
    C0.DDR4_Ordering  Normal
    C0.DDR4_RANK_WIDTH  2
    C0.DDR4_ROW_WIDTH  16
    C0.DDR4_tCK  938
    C0.DDR4_tCKE  0
    C0.DDR4_tFAW  23
    C0.DDR4_tMRD  2
    C0.DDR4_tRAS  35
    C0.DDR4_tRCD  16
    C0.DDR4_tREFI  8315
    C0.DDR4_tRFC  374
    C0.DDR4_tRP  16
    C0.DDR4_tRRD_L  6
    C0.DDR4_tRRD_S  4
    C0.DDR4_tRTP  8
    C0.DDR4_tWR  16
    C0.DDR4_tWTR_L  8
    C0.DDR4_tWTR_S  3
    C0.DDR4_tXPR  96
    C0.DDR4_tZQCS  128
    C0.DDR4_tZQI  0
    C0.DDR4_tZQINIT  256
    CAS_LATENCY  15
    CAS_WRITE_LATENCY  14
    DATA_WIDTH  72
    MEMORY_PART  MTA18ASF2G72PDZ-2G3
    MEM_ADDR_MAP  ROW_COLUMN_BANK
    TIMEPERIOD_PS  938
} \
  ];
lappend board_memories [dict create  \
  NAME        base_region_memc_ddrmem_1 \
  TYPE        ddr4 \
  SIZE        16GB \
  CONFIG      {    AXI_ARBITRATION_SCHEME  RD_PRI_REG
    BURST_LENGTH  8
    C0.APP_ADDR_WIDTH  31
    C0.APP_DATA_WIDTH  512
    C0.ControllerType  DDR4_SDRAM
    C0.DDR4_ADDR_WIDTH  17
    C0.DDR4_AXI_ADDR_WIDTH  34
    C0.DDR4_AXI_DATA_WIDTH  512
    C0.DDR4_AXI_ID_WIDTH  1
    C0.DDR4_AutoPrecharge  false
    C0.DDR4_AxiNarrowBurst  false
    C0.DDR4_BANK_GROUP_WIDTH  2
    C0.DDR4_BANK_WIDTH  2
    C0.DDR4_CL  0
    C0.DDR4_COLUMN_WIDTH  10
    C0.DDR4_CWL  0
    C0.DDR4_Mem_Add_Map  ROW_COLUMN_BANK
    C0.DDR4_Ordering  Normal
    C0.DDR4_RANK_WIDTH  2
    C0.DDR4_ROW_WIDTH  16
    C0.DDR4_tCK  938
    C0.DDR4_tCKE  0
    C0.DDR4_tFAW  23
    C0.DDR4_tMRD  2
    C0.DDR4_tRAS  35
    C0.DDR4_tRCD  16
    C0.DDR4_tREFI  8315
    C0.DDR4_tRFC  374
    C0.DDR4_tRP  16
    C0.DDR4_tRRD_L  6
    C0.DDR4_tRRD_S  4
    C0.DDR4_tRTP  8
    C0.DDR4_tWR  16
    C0.DDR4_tWTR_L  8
    C0.DDR4_tWTR_S  3
    C0.DDR4_tXPR  96
    C0.DDR4_tZQCS  128
    C0.DDR4_tZQI  0
    C0.DDR4_tZQINIT  256
    CAS_LATENCY  15
    CAS_WRITE_LATENCY  14
    DATA_WIDTH  72
    MEMORY_PART  MTA18ASF2G72PDZ-2G3
    MEM_ADDR_MAP  ROW_COLUMN_BANK
    TIMEPERIOD_PS  938
} \
  ];
lappend board_memories [dict create  \
  NAME        expanded_region_memc_ddrmem_2 \
  TYPE        ddr4 \
  SIZE        16GB \
  CONFIG      {    AXI_ARBITRATION_SCHEME  RD_PRI_REG
    BURST_LENGTH  8
    C0.APP_ADDR_WIDTH  31
    C0.APP_DATA_WIDTH  512
    C0.ControllerType  DDR4_SDRAM
    C0.DDR4_ADDR_WIDTH  17
    C0.DDR4_AXI_ADDR_WIDTH  34
    C0.DDR4_AXI_DATA_WIDTH  512
    C0.DDR4_AXI_ID_WIDTH  1
    C0.DDR4_AutoPrecharge  false
    C0.DDR4_AxiNarrowBurst  false
    C0.DDR4_BANK_GROUP_WIDTH  2
    C0.DDR4_BANK_WIDTH  2
    C0.DDR4_CL  0
    C0.DDR4_COLUMN_WIDTH  10
    C0.DDR4_CWL  0
    C0.DDR4_Mem_Add_Map  ROW_COLUMN_BANK
    C0.DDR4_Ordering  Normal
    C0.DDR4_RANK_WIDTH  2
    C0.DDR4_ROW_WIDTH  16
    C0.DDR4_tCK  938
    C0.DDR4_tCKE  0
    C0.DDR4_tFAW  23
    C0.DDR4_tMRD  2
    C0.DDR4_tRAS  35
    C0.DDR4_tRCD  16
    C0.DDR4_tREFI  8315
    C0.DDR4_tRFC  374
    C0.DDR4_tRP  16
    C0.DDR4_tRRD_L  6
    C0.DDR4_tRRD_S  4
    C0.DDR4_tRTP  8
    C0.DDR4_tWR  16
    C0.DDR4_tWTR_L  8
    C0.DDR4_tWTR_S  3
    C0.DDR4_tXPR  96
    C0.DDR4_tZQCS  128
    C0.DDR4_tZQI  0
    C0.DDR4_tZQINIT  256
    CAS_LATENCY  15
    CAS_WRITE_LATENCY  14
    DATA_WIDTH  72
    MEMORY_PART  MTA18ASF2G72PDZ-2G3
    MEM_ADDR_MAP  ROW_COLUMN_BANK
    TIMEPERIOD_PS  938
} \
  ];
lappend board_memories [dict create  \
  NAME        expanded_region_memc_ddrmem_3 \
  TYPE        ddr4 \
  SIZE        16GB \
  CONFIG      {    AXI_ARBITRATION_SCHEME  RD_PRI_REG
    BURST_LENGTH  8
    C0.APP_ADDR_WIDTH  31
    C0.APP_DATA_WIDTH  512
    C0.ControllerType  DDR4_SDRAM
    C0.DDR4_ADDR_WIDTH  17
    C0.DDR4_AXI_ADDR_WIDTH  34
    C0.DDR4_AXI_DATA_WIDTH  512
    C0.DDR4_AXI_ID_WIDTH  1
    C0.DDR4_AutoPrecharge  false
    C0.DDR4_AxiNarrowBurst  false
    C0.DDR4_BANK_GROUP_WIDTH  2
    C0.DDR4_BANK_WIDTH  2
    C0.DDR4_CL  0
    C0.DDR4_COLUMN_WIDTH  10
    C0.DDR4_CWL  0
    C0.DDR4_Mem_Add_Map  ROW_COLUMN_BANK
    C0.DDR4_Ordering  Normal
    C0.DDR4_RANK_WIDTH  2
    C0.DDR4_ROW_WIDTH  16
    C0.DDR4_tCK  938
    C0.DDR4_tCKE  0
    C0.DDR4_tFAW  23
    C0.DDR4_tMRD  2
    C0.DDR4_tRAS  35
    C0.DDR4_tRCD  16
    C0.DDR4_tREFI  8315
    C0.DDR4_tRFC  374
    C0.DDR4_tRP  16
    C0.DDR4_tRRD_L  6
    C0.DDR4_tRRD_S  4
    C0.DDR4_tRTP  8
    C0.DDR4_tWR  16
    C0.DDR4_tWTR_L  8
    C0.DDR4_tWTR_S  3
    C0.DDR4_tXPR  96
    C0.DDR4_tZQCS  128
    C0.DDR4_tZQI  0
    C0.DDR4_tZQINIT  256
    CAS_LATENCY  15
    CAS_WRITE_LATENCY  14
    DATA_WIDTH  72
    MEMORY_PART  MTA18ASF2G72PDZ-2G3
    MEM_ADDR_MAP  ROW_COLUMN_BANK
    TIMEPERIOD_PS  938
} \
  ];

set kernels {}
set kernel_resources {}
if { [file exists ./map.tcl] } {
  puts "Sourcing kernel info from: ./map.tcl"
  source ./map.tcl
}

#### Clean Existing project files (allows for iterative sourcing of this script)
catch {close_project} 
file delete -force $project_name 

### Create OCL region
send_msg_id {101-1} {status} {Creating Vivado project and starting FPGA synthesis.}
create_project -part $dsa_part -force $project_name $project_name 
ocl_util::add_to_steps_log $steps_log "internal step: creating ipiprj project for generating ocl dcp"
ocl_util::init_ocl_project $design_name $kernel_ip_dirs 
ocl_util::add_to_steps_log $steps_log "internal step: creating ocl region bd"
set ocl_content_dict [ocl_util::create_ocl_region_bd $dsa_name $dsa_ports $kernels $ocl_ip_info $kernel_resources $debug_settings]

# Copy the OOC constraint files in BD, and add them to the top level design in order for
# the clock constraints to be applied
set_param project.loadTopLevelOOCConstrs 1
set ooc_xdc_files [get_files -of_object [get_files $design_name.bd] -norecurse -filter { FILE_TYPE == "XDC" && USED_IN =~ "*out_of_context*" }]
foreach ooc_xdc_file $ooc_xdc_files {
  if {![string equal $ooc_xdc_file ""] && [file exists $ooc_xdc_file]} {
    set used_in_value [get_property used_in $ooc_xdc_file]
    set xdc_file "[file rootname [file tail $ooc_xdc_file]]_copy.xdc"
    file copy $ooc_xdc_file ./$xdc_file
    ocl_util::write_user_synth_clock_constraint $xdc_file $kernel_clock_freqs
    set xdc_file_obj [add_files ./$xdc_file -fileset [current_fileset -constrset]]
    set_property used_in $used_in_value $xdc_file_obj
    set_property processing_order "early" [get_files $xdc_file]
  }
}

### Create OCL region DCP
# this creates all the ooc run objects without running them
launch_runs synth_1 -scripts_only
# rest all the synthesis runs
set runs [get_runs -filter {IS_SYNTHESIS == 1}]
foreach _run $runs {
  reset_run [get_runs $_run]
}
dict set config_info synth_user_tcl "./_vivado_synth_user.tcl"
ocl_util::create_ocl_dcp $dsa_info $utilization $config_info
close_project 

### Run platform impl flow
if { $dsa_uses_pr_shell_dcp } {
  set_param physdb.placeDBIO.clearFailedSites false
  set_param physdb.PlaceDBIO.netlistIssues INFO
}
set_param bitstream.enablePR 4123
set_param hd.supportClockNetCrossDiffReconfigurablePartitions true
dict set config_info enable_lock_crit_insts false
dict set config_info xocc_optimize_level 0
dict set config_info impl_user_tcl "./_vivado_impl_user.tcl"
dict set config_info is_incr_flow false
ocl_util::create_bitstreams_with_runs_for_expanded_pr $dsa_info $config_info $clk_info $design_name

