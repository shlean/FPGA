// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmult,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=3.333330,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433330,HLS_SYN_LAT=135004193,HLS_SYN_TPT=none,HLS_SYN_MEM=1394,HLS_SYN_DSP=4,HLS_SYN_FF=1922,HLS_SYN_LUT=2330}" *)

module mmult (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_pp0_stage0 = 26'd256;
parameter    ap_ST_fsm_state12 = 26'd512;
parameter    ap_ST_fsm_state13 = 26'd1024;
parameter    ap_ST_fsm_state14 = 26'd2048;
parameter    ap_ST_fsm_state15 = 26'd4096;
parameter    ap_ST_fsm_state16 = 26'd8192;
parameter    ap_ST_fsm_state17 = 26'd16384;
parameter    ap_ST_fsm_state18 = 26'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 26'd65536;
parameter    ap_ST_fsm_state22 = 26'd131072;
parameter    ap_ST_fsm_pp2_stage0 = 26'd262144;
parameter    ap_ST_fsm_state30 = 26'd524288;
parameter    ap_ST_fsm_pp3_stage0 = 26'd1048576;
parameter    ap_ST_fsm_state34 = 26'd2097152;
parameter    ap_ST_fsm_state35 = 26'd4194304;
parameter    ap_ST_fsm_state36 = 26'd8388608;
parameter    ap_ST_fsm_state37 = 26'd16777216;
parameter    ap_ST_fsm_state38 = 26'd33554432;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] a;
wire   [63:0] b;
wire   [63:0] output_r;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state30;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond3_reg_819;
reg   [0:0] ap_reg_pp3_iter1_exitcond3_reg_819;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state38;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state12;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond1_reg_705;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond2_reg_691;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [18:0] indvar_reg_250;
reg   [18:0] ap_reg_pp0_iter1_indvar_reg_250;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [18:0] indvar8_reg_262;
reg   [18:0] ap_reg_pp1_iter1_indvar8_reg_262;
wire    ap_block_state19_pp1_stage0_iter0;
reg    ap_block_state20_pp1_stage0_iter1;
wire    ap_block_state21_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [27:0] indvar_flatten1_reg_274;
reg   [19:0] indvar_flatten_reg_285;
reg   [9:0] c_reg_296;
reg   [9:0] r_reg_307;
reg   [31:0] running_reg_318;
reg   [9:0] index_reg_330;
reg   [18:0] indvar1_reg_341;
reg   [63:0] gmem_addr_reg_673;
reg   [63:0] gmem_addr_1_reg_679;
reg   [63:0] gmem_addr_2_reg_685;
wire   [0:0] exitcond2_fu_412_p2;
reg   [0:0] ap_reg_pp0_iter1_exitcond2_reg_691;
wire   [18:0] indvar_next_fu_418_p2;
reg   [18:0] indvar_next_reg_695;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] gmem_addr_2_read_reg_700;
wire   [0:0] exitcond1_fu_429_p2;
reg   [0:0] ap_reg_pp1_iter1_exitcond1_reg_705;
wire   [18:0] indvar_next9_fu_435_p2;
reg   [18:0] indvar_next9_reg_709;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] gmem_addr_1_read_reg_714;
wire   [0:0] exitcond_flatten1_fu_446_p2;
reg   [0:0] exitcond_flatten1_reg_719;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state23_pp2_stage0_iter0;
wire    ap_block_state24_pp2_stage0_iter1;
wire    ap_block_state25_pp2_stage0_iter2;
wire    ap_block_state26_pp2_stage0_iter3;
wire    ap_block_state27_pp2_stage0_iter4;
wire    ap_block_state28_pp2_stage0_iter5;
wire    ap_block_state29_pp2_stage0_iter6;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] ap_reg_pp2_iter1_exitcond_flatten1_reg_719;
reg   [0:0] ap_reg_pp2_iter2_exitcond_flatten1_reg_719;
reg   [0:0] ap_reg_pp2_iter3_exitcond_flatten1_reg_719;
reg   [0:0] ap_reg_pp2_iter4_exitcond_flatten1_reg_719;
reg   [0:0] ap_reg_pp2_iter5_exitcond_flatten1_reg_719;
wire   [27:0] indvar_flatten_next1_fu_452_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] exitcond_flatten_fu_458_p2;
reg   [0:0] exitcond_flatten_reg_728;
wire   [19:0] indvar_flatten_next_fu_470_p3;
wire   [9:0] c_cast4_mid2_v_fu_503_p3;
reg   [9:0] c_cast4_mid2_v_reg_742;
reg    ap_enable_reg_pp2_iter1;
wire   [0:0] tmp_14_fu_540_p2;
reg   [0:0] tmp_14_reg_748;
reg   [0:0] ap_reg_pp2_iter2_tmp_14_reg_748;
reg   [0:0] ap_reg_pp2_iter3_tmp_14_reg_748;
reg   [0:0] ap_reg_pp2_iter4_tmp_14_reg_748;
reg   [0:0] ap_reg_pp2_iter5_tmp_14_reg_748;
wire   [9:0] index_mid2_fu_545_p3;
reg   [9:0] index_mid2_reg_753;
wire   [17:0] tmp_6_mid2_fu_565_p3;
reg   [17:0] tmp_6_mid2_reg_758;
wire   [9:0] r_mid2_fu_573_p3;
wire   [8:0] tmp_16_fu_581_p1;
reg   [8:0] tmp_16_reg_769;
wire   [9:0] index_1_fu_585_p2;
reg   [9:0] index_1_reg_774;
wire   [0:0] ifzero_fu_625_p2;
reg   [0:0] ifzero_reg_790;
reg   [0:0] ap_reg_pp2_iter3_ifzero_reg_790;
reg   [0:0] ap_reg_pp2_iter4_ifzero_reg_790;
reg   [0:0] ap_reg_pp2_iter5_ifzero_reg_790;
wire   [17:0] tmp_7_fu_630_p2;
reg   [17:0] tmp_7_reg_794;
reg   [17:0] ap_reg_pp2_iter3_tmp_7_reg_794;
reg   [17:0] ap_reg_pp2_iter4_tmp_7_reg_794;
reg   [17:0] ap_reg_pp2_iter5_tmp_7_reg_794;
wire   [31:0] bufa_q0;
reg  signed [31:0] bufa_load_reg_799;
reg    ap_enable_reg_pp2_iter3;
wire   [31:0] bufb_q0;
reg  signed [31:0] bufb_load_reg_804;
wire   [31:0] grp_fu_635_p2;
reg   [31:0] tmp_10_reg_809;
wire   [31:0] running_1_fu_646_p2;
reg    ap_enable_reg_pp2_iter6;
wire   [0:0] exitcond3_fu_656_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state31_pp3_stage0_iter0;
wire    ap_block_state32_pp3_stage0_iter1;
wire    ap_block_state33_pp3_stage0_iter2;
reg    ap_sig_ioackin_gmem_WREADY;
reg    ap_block_state33_io;
reg    ap_block_pp3_stage0_11001;
wire   [18:0] indvar_next1_fu_662_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [31:0] bufc_q0;
reg   [31:0] bufc_load_reg_833;
reg    ap_enable_reg_pp3_iter1;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state18;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state19;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state22;
wire    ap_block_pp2_stage0_subdone;
reg    ap_enable_reg_pp2_iter2;
reg    ap_condition_pp2_exit_iter1_state24;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_sig_ioackin_gmem_AWREADY;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state31;
reg   [17:0] bufa_address0;
reg    bufa_ce0;
reg    bufa_we0;
reg   [17:0] bufb_address0;
reg    bufb_ce0;
reg    bufb_we0;
reg   [17:0] bufc_address0;
reg    bufc_ce0;
reg    bufc_we0;
wire   [31:0] bufc_d0;
reg   [18:0] indvar_phi_fu_254_p4;
reg   [18:0] indvar8_phi_fu_266_p4;
reg   [9:0] c_phi_fu_300_p4;
wire    ap_block_pp2_stage0;
reg   [9:0] index_phi_fu_334_p4;
wire   [63:0] tmp_fu_424_p1;
wire   [63:0] tmp_1_fu_441_p1;
wire   [63:0] tmp_5_fu_615_p1;
wire   [63:0] tmp_9_fu_620_p1;
wire   [63:0] tmp_8_fu_652_p1;
wire   [63:0] tmp_4_fu_668_p1;
wire   [63:0] tmp_2_fu_362_p1;
wire   [63:0] tmp_3_fu_382_p1;
wire   [63:0] tmp_12_fu_402_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
wire    ap_block_pp3_stage0_01001;
wire   [61:0] output5_fu_352_p4;
wire   [61:0] b3_fu_372_p4;
wire   [61:0] a1_fu_392_p4;
wire   [19:0] indvar_flatten_op_fu_464_p2;
wire   [8:0] tmp_13_fu_478_p1;
wire   [9:0] c_s_fu_497_p2;
wire   [17:0] tmp_6_fu_482_p3;
wire   [0:0] exitcond_fu_522_p2;
wire   [0:0] not_exitcond_flatten_fu_517_p2;
wire   [9:0] r_mid_fu_490_p3;
wire   [0:0] exitcond_mid_fu_528_p2;
wire   [9:0] r_1_fu_534_p2;
wire   [8:0] tmp_15_fu_553_p1;
wire   [17:0] tmp_6_mid1_fu_557_p3;
wire   [17:0] tmp_6_mid_fu_510_p3;
wire   [17:0] index_cast2_fu_594_p1;
wire   [17:0] tmp_s_fu_602_p3;
wire   [17:0] c_cast4_mid2_fu_591_p1;
wire   [17:0] aIndex_fu_597_p2;
wire   [17:0] bIndex_fu_609_p2;
wire   [31:0] running_mid2_fu_639_p3;
reg   [25:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 26'd1;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

mmult_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
mmult_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .a(a),
    .b(b),
    .output_r(output_r)
);

mmult_gmem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
mmult_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd262144),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_reg_673),
    .I_AWID(1'd0),
    .I_AWLEN(32'd262144),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(bufc_load_reg_833),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

mmult_bufa #(
    .DataWidth( 32 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
bufa_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bufa_address0),
    .ce0(bufa_ce0),
    .we0(bufa_we0),
    .d0(gmem_addr_2_read_reg_700),
    .q0(bufa_q0)
);

mmult_bufa #(
    .DataWidth( 32 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
bufb_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bufb_address0),
    .ce0(bufb_ce0),
    .we0(bufb_we0),
    .d0(gmem_addr_1_read_reg_714),
    .q0(bufb_q0)
);

mmult_bufa #(
    .DataWidth( 32 ),
    .AddressRange( 262144 ),
    .AddressWidth( 18 ))
bufc_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bufc_address0),
    .ce0(bufc_ce0),
    .we0(bufc_we0),
    .d0(bufc_d0),
    .q0(bufc_q0)
);

mmult_mul_32s_32s_32_2 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mmult_mul_32s_32s_32_2_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(bufb_load_reg_804),
    .din1(bufa_load_reg_799),
    .ce(1'b1),
    .dout(grp_fu_635_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state9))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state9 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state19))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state19)) begin
                ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state19 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_subdone == 1'b0) & (exitcond_flatten1_fu_446_p2 == 1'd1))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp2_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp2_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter1_state24)) begin
                ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp2_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp2_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp2_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp2_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp2_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp3_exit_iter0_state31))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state30) & (ap_sig_ioackin_gmem_AWREADY == 1'b1))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp3_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state31)) begin
                ap_enable_reg_pp3_iter1 <= (ap_condition_pp3_exit_iter0_state31 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp3_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((1'b1 == ap_CS_fsm_state30) & (ap_sig_ioackin_gmem_AWREADY == 1'b1))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state12) & (ap_sig_ioackin_gmem_ARREADY == 1'b1)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state2) & (1'b1 == gmem_ARREADY)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == gmem_ARREADY)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state30)) begin
            if ((ap_sig_ioackin_gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((1'b1 == gmem_AWREADY)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp3_iter2) & (ap_reg_pp3_iter1_exitcond3_reg_819 == 1'd0))) begin
            if ((ap_block_pp3_stage0_11001 == 1'b0)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if (((1'b1 == gmem_WREADY) & (ap_block_pp3_stage0_01001 == 1'b0))) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        c_reg_296 <= 10'd0;
    end else if (((ap_block_pp2_stage0_11001 == 1'b0) & (1'd0 == ap_reg_pp2_iter1_exitcond_flatten1_reg_719) & (1'b1 == ap_enable_reg_pp2_iter2))) begin
        c_reg_296 <= c_cast4_mid2_v_reg_742;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        index_reg_330 <= 10'd0;
    end else if (((ap_block_pp2_stage0_11001 == 1'b0) & (1'd0 == ap_reg_pp2_iter1_exitcond_flatten1_reg_719) & (1'b1 == ap_enable_reg_pp2_iter2))) begin
        index_reg_330 <= index_1_reg_774;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (ap_sig_ioackin_gmem_AWREADY == 1'b1))) begin
        indvar1_reg_341 <= 19'd0;
    end else if (((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp3_iter0) & (1'd0 == exitcond3_fu_656_p2))) begin
        indvar1_reg_341 <= indvar_next1_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        indvar8_reg_262 <= 19'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond1_reg_705) & (ap_block_pp1_stage0_11001 == 1'b0))) begin
        indvar8_reg_262 <= indvar_next9_reg_709;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        indvar_flatten1_reg_274 <= 28'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'd0 == exitcond_flatten1_fu_446_p2))) begin
        indvar_flatten1_reg_274 <= indvar_flatten_next1_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        indvar_flatten_reg_285 <= 20'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'd0 == exitcond_flatten1_fu_446_p2))) begin
        indvar_flatten_reg_285 <= indvar_flatten_next_fu_470_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond2_reg_691) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        indvar_reg_250 <= indvar_next_reg_695;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_reg_250 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        r_reg_307 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd0 == exitcond_flatten1_reg_719))) begin
        r_reg_307 <= r_mid2_fu_573_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        running_reg_318 <= 32'd0;
    end else if (((ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter6) & (1'd0 == ap_reg_pp2_iter5_exitcond_flatten1_reg_719))) begin
        running_reg_318 <= running_1_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond2_reg_691 <= exitcond2_reg_691;
        ap_reg_pp0_iter1_indvar_reg_250 <= indvar_reg_250;
        exitcond2_reg_691 <= exitcond2_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0))) begin
        ap_reg_pp1_iter1_exitcond1_reg_705 <= exitcond1_reg_705;
        ap_reg_pp1_iter1_indvar8_reg_262 <= indvar8_reg_262;
        exitcond1_reg_705 <= exitcond1_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_11001 == 1'b0))) begin
        ap_reg_pp2_iter1_exitcond_flatten1_reg_719 <= exitcond_flatten1_reg_719;
        exitcond_flatten1_reg_719 <= exitcond_flatten1_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp2_stage0_11001 == 1'b0)) begin
        ap_reg_pp2_iter2_exitcond_flatten1_reg_719 <= ap_reg_pp2_iter1_exitcond_flatten1_reg_719;
        ap_reg_pp2_iter2_tmp_14_reg_748 <= tmp_14_reg_748;
        ap_reg_pp2_iter3_exitcond_flatten1_reg_719 <= ap_reg_pp2_iter2_exitcond_flatten1_reg_719;
        ap_reg_pp2_iter3_ifzero_reg_790 <= ifzero_reg_790;
        ap_reg_pp2_iter3_tmp_14_reg_748 <= ap_reg_pp2_iter2_tmp_14_reg_748;
        ap_reg_pp2_iter3_tmp_7_reg_794 <= tmp_7_reg_794;
        ap_reg_pp2_iter4_exitcond_flatten1_reg_719 <= ap_reg_pp2_iter3_exitcond_flatten1_reg_719;
        ap_reg_pp2_iter4_ifzero_reg_790 <= ap_reg_pp2_iter3_ifzero_reg_790;
        ap_reg_pp2_iter4_tmp_14_reg_748 <= ap_reg_pp2_iter3_tmp_14_reg_748;
        ap_reg_pp2_iter4_tmp_7_reg_794 <= ap_reg_pp2_iter3_tmp_7_reg_794;
        ap_reg_pp2_iter5_exitcond_flatten1_reg_719 <= ap_reg_pp2_iter4_exitcond_flatten1_reg_719;
        ap_reg_pp2_iter5_ifzero_reg_790 <= ap_reg_pp2_iter4_ifzero_reg_790;
        ap_reg_pp2_iter5_tmp_14_reg_748 <= ap_reg_pp2_iter4_tmp_14_reg_748;
        ap_reg_pp2_iter5_tmp_7_reg_794 <= ap_reg_pp2_iter4_tmp_7_reg_794;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_11001 == 1'b0))) begin
        ap_reg_pp3_iter1_exitcond3_reg_819 <= exitcond3_reg_819;
        exitcond3_reg_819 <= exitcond3_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter3) & (1'd0 == ap_reg_pp2_iter2_exitcond_flatten1_reg_719))) begin
        bufa_load_reg_799 <= bufa_q0;
        bufb_load_reg_804 <= bufb_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp3_iter1) & (exitcond3_reg_819 == 1'd0))) begin
        bufc_load_reg_833 <= bufc_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd0 == exitcond_flatten1_reg_719))) begin
        c_cast4_mid2_v_reg_742 <= c_cast4_mid2_v_fu_503_p3;
        index_1_reg_774 <= index_1_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_11001 == 1'b0) & (1'd0 == exitcond_flatten1_fu_446_p2))) begin
        exitcond_flatten_reg_728 <= exitcond_flatten_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'd0 == exitcond1_reg_705) & (ap_block_pp1_stage0_11001 == 1'b0))) begin
        gmem_addr_1_read_reg_714 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        gmem_addr_1_reg_679[61 : 0] <= tmp_3_fu_382_p1[61 : 0];
        gmem_addr_2_reg_685[61 : 0] <= tmp_12_fu_402_p1[61 : 0];
        gmem_addr_reg_673[61 : 0] <= tmp_2_fu_362_p1[61 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond2_reg_691) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        gmem_addr_2_read_reg_700 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp2_stage0_11001 == 1'b0) & (1'd0 == ap_reg_pp2_iter1_exitcond_flatten1_reg_719))) begin
        ifzero_reg_790 <= ifzero_fu_625_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_11001 == 1'b0) & (1'd0 == exitcond_flatten1_reg_719))) begin
        index_mid2_reg_753 <= index_mid2_fu_545_p3;
        tmp_14_reg_748 <= tmp_14_fu_540_p2;
        tmp_16_reg_769 <= tmp_16_fu_581_p1;
        tmp_6_mid2_reg_758[17 : 9] <= tmp_6_mid2_fu_565_p3[17 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        indvar_next9_reg_709 <= indvar_next9_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_next_reg_695 <= indvar_next_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp2_stage0_11001 == 1'b0) & (1'd0 == ap_reg_pp2_iter4_exitcond_flatten1_reg_719))) begin
        tmp_10_reg_809 <= grp_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp2_stage0_11001 == 1'b0) & (ifzero_fu_625_p2 == 1'd1))) begin
        tmp_7_reg_794 <= tmp_7_fu_630_p2;
    end
end

always @ (*) begin
    if ((exitcond2_fu_412_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_429_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_condition_pp2_exit_iter1_state24 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter1_state24 = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond3_fu_656_p2)) begin
        ap_condition_pp3_exit_iter0_state31 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state31 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) & (gmem_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1) & (1'b0 == ap_enable_reg_pp1_iter2))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp2_iter0) & (1'b0 == ap_enable_reg_pp2_iter1) & (1'b0 == ap_enable_reg_pp2_iter2) & (1'b0 == ap_enable_reg_pp2_iter3) & (1'b0 == ap_enable_reg_pp2_iter4) & (1'b0 == ap_enable_reg_pp2_iter5) & (1'b0 == ap_enable_reg_pp2_iter6))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp3_iter0) & (1'b0 == ap_enable_reg_pp3_iter1) & (1'b0 == ap_enable_reg_pp3_iter2))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) & (gmem_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_AWREADY)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_WREADY)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp2_iter2) & (ap_block_pp2_stage0 == 1'b0))) begin
        bufa_address0 = tmp_5_fu_615_p1;
    end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        bufa_address0 = tmp_fu_424_p1;
    end else begin
        bufa_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter2)) | ((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        bufa_ce0 = 1'b1;
    end else begin
        bufa_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter1_exitcond2_reg_691))) begin
        bufa_we0 = 1'b1;
    end else begin
        bufa_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp2_iter2) & (ap_block_pp2_stage0 == 1'b0))) begin
        bufb_address0 = tmp_9_fu_620_p1;
    end else if (((ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2))) begin
        bufb_address0 = tmp_1_fu_441_p1;
    end else begin
        bufb_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter2)) | ((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2)))) begin
        bufb_ce0 = 1'b1;
    end else begin
        bufb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond1_reg_705))) begin
        bufb_we0 = 1'b1;
    end else begin
        bufb_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp3_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter0))) begin
        bufc_address0 = tmp_4_fu_668_p1;
    end else if (((1'b1 == ap_enable_reg_pp2_iter6) & (ap_block_pp2_stage0 == 1'b0))) begin
        bufc_address0 = tmp_8_fu_652_p1;
    end else begin
        bufc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter6)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (ap_block_pp3_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp3_iter0)))) begin
        bufc_ce0 = 1'b1;
    end else begin
        bufc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter6) & (ap_reg_pp2_iter5_ifzero_reg_790 == 1'd1))) begin
        bufc_we0 = 1'b1;
    end else begin
        bufc_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == ap_reg_pp2_iter1_exitcond_flatten1_reg_719) & (1'b1 == ap_enable_reg_pp2_iter2) & (ap_block_pp2_stage0 == 1'b0))) begin
        c_phi_fu_300_p4 = c_cast4_mid2_v_reg_742;
    end else begin
        c_phi_fu_300_p4 = c_reg_296;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            gmem_ARADDR = gmem_addr_1_reg_679;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            gmem_ARADDR = gmem_addr_2_reg_685;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)) | ((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_reg_ioackin_gmem_AWREADY))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) & (gmem_BVALID == 1'b1))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond2_reg_691) & (ap_block_pp0_stage0_11001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond1_reg_705) & (ap_block_pp1_stage0_11001 == 1'b0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp3_iter2) & (ap_reg_pp3_iter1_exitcond3_reg_819 == 1'd0) & (ap_block_pp3_stage0_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_gmem_WREADY))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0 == 1'b0) & (1'd0 == exitcond1_reg_705)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0) & (1'd0 == exitcond2_reg_691)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp3_iter2) & (ap_block_pp3_stage0 == 1'b0) & (ap_reg_pp3_iter1_exitcond3_reg_819 == 1'd0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == ap_reg_pp2_iter1_exitcond_flatten1_reg_719) & (1'b1 == ap_enable_reg_pp2_iter2) & (ap_block_pp2_stage0 == 1'b0))) begin
        index_phi_fu_334_p4 = index_1_reg_774;
    end else begin
        index_phi_fu_334_p4 = index_reg_330;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0 == 1'b0) & (1'd0 == exitcond1_reg_705))) begin
        indvar8_phi_fu_266_p4 = indvar_next9_reg_709;
    end else begin
        indvar8_phi_fu_266_p4 = indvar8_reg_262;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0) & (1'd0 == exitcond2_reg_691))) begin
        indvar_phi_fu_254_p4 = indvar_next_reg_695;
    end else begin
        indvar_phi_fu_254_p4 = indvar_reg_250;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (exitcond2_fu_412_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (exitcond2_fu_412_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (ap_sig_ioackin_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_block_pp1_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_subdone == 1'b0) & (exitcond1_fu_429_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_block_pp1_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_subdone == 1'b0) & (exitcond1_fu_429_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp2_iter6) & (ap_block_pp2_stage0_subdone == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0)) & ~((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_subdone == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp2_iter6) & (ap_block_pp2_stage0_subdone == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_subdone == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (ap_sig_ioackin_gmem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp3_iter2) & (ap_block_pp3_stage0_subdone == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp3_iter0) & (ap_block_pp3_stage0_subdone == 1'b0) & (1'd1 == exitcond3_fu_656_p2) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp3_iter2) & (ap_block_pp3_stage0_subdone == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp3_iter0) & (ap_block_pp3_stage0_subdone == 1'b0) & (1'd1 == exitcond3_fu_656_p2) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == ap_CS_fsm_state38) & (gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a1_fu_392_p4 = {{a[63:2]}};

assign aIndex_fu_597_p2 = (index_cast2_fu_594_p1 + tmp_6_mid2_reg_758);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond2_reg_691) & (1'b0 == gmem_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond2_reg_691) & (1'b0 == gmem_RVALID));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond1_reg_705) & (1'b0 == gmem_RVALID));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond1_reg_705) & (1'b0 == gmem_RVALID));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b1 == ap_block_state33_io));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b1 == ap_block_state33_io));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((1'd0 == exitcond2_reg_691) & (1'b0 == gmem_RVALID));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp1_stage0_iter1 = ((1'd0 == exitcond1_reg_705) & (1'b0 == gmem_RVALID));
end

assign ap_block_state21_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33_io = ((ap_reg_pp3_iter1_exitcond3_reg_819 == 1'd0) & (1'b0 == ap_sig_ioackin_gmem_WREADY));
end

assign ap_block_state33_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign b3_fu_372_p4 = {{b[63:2]}};

assign bIndex_fu_609_p2 = (tmp_s_fu_602_p3 + c_cast4_mid2_fu_591_p1);

assign bufc_d0 = (running_mid2_fu_639_p3 + tmp_10_reg_809);

assign c_cast4_mid2_fu_591_p1 = c_cast4_mid2_v_reg_742;

assign c_cast4_mid2_v_fu_503_p3 = ((exitcond_flatten_reg_728[0:0] === 1'b1) ? c_s_fu_497_p2 : c_phi_fu_300_p4);

assign c_s_fu_497_p2 = (10'd1 + c_phi_fu_300_p4);

assign exitcond1_fu_429_p2 = ((indvar8_phi_fu_266_p4 == 19'd262144) ? 1'b1 : 1'b0);

assign exitcond2_fu_412_p2 = ((indvar_phi_fu_254_p4 == 19'd262144) ? 1'b1 : 1'b0);

assign exitcond3_fu_656_p2 = ((indvar1_reg_341 == 19'd262144) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_446_p2 = ((indvar_flatten1_reg_274 == 28'd134217728) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_458_p2 = ((indvar_flatten_reg_285 == 20'd262144) ? 1'b1 : 1'b0);

assign exitcond_fu_522_p2 = ((index_phi_fu_334_p4 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_528_p2 = (exitcond_fu_522_p2 & not_exitcond_flatten_fu_517_p2);

assign ifzero_fu_625_p2 = ((index_1_reg_774 == 10'd512) ? 1'b1 : 1'b0);

assign index_1_fu_585_p2 = (10'd1 + index_mid2_fu_545_p3);

assign index_cast2_fu_594_p1 = index_mid2_reg_753;

assign index_mid2_fu_545_p3 = ((tmp_14_fu_540_p2[0:0] === 1'b1) ? 10'd0 : index_phi_fu_334_p4);

assign indvar_flatten_next1_fu_452_p2 = (28'd1 + indvar_flatten1_reg_274);

assign indvar_flatten_next_fu_470_p3 = ((exitcond_flatten_fu_458_p2[0:0] === 1'b1) ? 20'd1 : indvar_flatten_op_fu_464_p2);

assign indvar_flatten_op_fu_464_p2 = (indvar_flatten_reg_285 + 20'd1);

assign indvar_next1_fu_662_p2 = (indvar1_reg_341 + 19'd1);

assign indvar_next9_fu_435_p2 = (indvar8_phi_fu_266_p4 + 19'd1);

assign indvar_next_fu_418_p2 = (indvar_phi_fu_254_p4 + 19'd1);

assign not_exitcond_flatten_fu_517_p2 = (exitcond_flatten_reg_728 ^ 1'd1);

assign output5_fu_352_p4 = {{output_r[63:2]}};

assign r_1_fu_534_p2 = (10'd1 + r_mid_fu_490_p3);

assign r_mid2_fu_573_p3 = ((exitcond_mid_fu_528_p2[0:0] === 1'b1) ? r_1_fu_534_p2 : r_mid_fu_490_p3);

assign r_mid_fu_490_p3 = ((exitcond_flatten_reg_728[0:0] === 1'b1) ? 10'd0 : r_reg_307);

assign running_1_fu_646_p2 = (running_mid2_fu_639_p3 + tmp_10_reg_809);

assign running_mid2_fu_639_p3 = ((ap_reg_pp2_iter5_tmp_14_reg_748[0:0] === 1'b1) ? 32'd0 : running_reg_318);

assign tmp_12_fu_402_p1 = a1_fu_392_p4;

assign tmp_13_fu_478_p1 = r_reg_307[8:0];

assign tmp_14_fu_540_p2 = (exitcond_mid_fu_528_p2 | exitcond_flatten_reg_728);

assign tmp_15_fu_553_p1 = r_1_fu_534_p2[8:0];

assign tmp_16_fu_581_p1 = index_mid2_fu_545_p3[8:0];

assign tmp_1_fu_441_p1 = ap_reg_pp1_iter1_indvar8_reg_262;

assign tmp_2_fu_362_p1 = output5_fu_352_p4;

assign tmp_3_fu_382_p1 = b3_fu_372_p4;

assign tmp_4_fu_668_p1 = indvar1_reg_341;

assign tmp_5_fu_615_p1 = aIndex_fu_597_p2;

assign tmp_6_fu_482_p3 = {{tmp_13_fu_478_p1}, {9'd0}};

assign tmp_6_mid1_fu_557_p3 = {{tmp_15_fu_553_p1}, {9'd0}};

assign tmp_6_mid2_fu_565_p3 = ((exitcond_mid_fu_528_p2[0:0] === 1'b1) ? tmp_6_mid1_fu_557_p3 : tmp_6_mid_fu_510_p3);

assign tmp_6_mid_fu_510_p3 = ((exitcond_flatten_reg_728[0:0] === 1'b1) ? 18'd0 : tmp_6_fu_482_p3);

assign tmp_7_fu_630_p2 = (tmp_6_mid2_reg_758 + c_cast4_mid2_fu_591_p1);

assign tmp_8_fu_652_p1 = ap_reg_pp2_iter5_tmp_7_reg_794;

assign tmp_9_fu_620_p1 = bIndex_fu_609_p2;

assign tmp_fu_424_p1 = ap_reg_pp0_iter1_indvar_reg_250;

assign tmp_s_fu_602_p3 = {{tmp_16_reg_769}, {9'd0}};

always @ (posedge ap_clk) begin
    gmem_addr_reg_673[63:62] <= 2'b00;
    gmem_addr_1_reg_679[63:62] <= 2'b00;
    gmem_addr_2_reg_685[63:62] <= 2'b00;
    tmp_6_mid2_reg_758[8:0] <= 9'b000000000;
end

endmodule //mmult
